#include "game.hpp"

static Mesh	*loadBasicRoad(void)
{
	Mesh *mesh = new Mesh(4);
	mesh->begin();
	static const GLfloat g_vertex_buffer_data[] = {
		-1.0f, 0.0f, -0.5f,	0.0f, 0.0f, -0.5f,	-1.0f, 0.0f, 0.5f,
		0.0f, 0.0f, 0.5f, 	-1.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,
		0.0f, 0.0f, -0.5f,	1.0f, 0.0f, -0.5f,	1.0f, 0.0f, 0.5f,
		1.0f, 0.0f, 0.5f, 	0.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,

		-1.0f, 0.0f, 0.5f,	-1.0f, 1.0f, 0.5f,	-1.0f, 0.0f, -0.5f,
		-1.0f, 0.0f, -0.5f,	-1.0f, 1.0f, 0.5f,	-1.0f, 1.0f, -0.5f,
		-1.0f, 1.0f, 0.5f,	-1.0f, 1.8f, 0.5f,	-1.0f, 1.0f, -0.5f,
		-1.0f, 1.0f, -0.5f,	-1.0f, 1.8f, 0.5f,	-1.0f, 1.8f, -0.5f,

		1.0f, 0.0f, 0.5f,	1.0f, 0.0f, -0.5f,	1.0f, 1.0f, 0.5f,
		1.0f, 0.0f, -0.5f,	1.0f, 1.0f, -0.5f,	1.0f, 1.0f, 0.5f,
		1.0f, 1.0f, 0.5f,	1.0f, 1.0f, -0.5f,	1.0f, 1.8f, 0.5f,
		1.0f, 1.0f, -0.5f,	1.0f, 1.8f, -0.5f,	1.0f, 1.8f, 0.5f,

		-1.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,	0.0f, 1.8f, -0.5f,
		0.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,
		0.0f, 1.8f, -0.5f,	1.0f, 1.8f, 0.5f,	1.0f, 1.8f, -0.5f,
		1.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	0.0f, 1.8f, 0.5f,
	};
	static const GLfloat g_color_buffer_data[] = {
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,

		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
	};
	static const GLfloat g_tex_buffer_data[] = {
		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	0.0, 0.0,
		1.0, 0.0,	0.0, 0.0,	0.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	1.0, 0.0,

		0.0, 0.0,	0.0, 1.0,	1.0, 0.0,
		1.0, 0.0,	0.0, 1.0,	1.0, 1.0,
		0.0, 0.2,	0.0, 1.0,	1.0, 0.2,
		1.0, 0.2,	0.0, 1.0,	1.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 0.0,	0.0, 1.0,	1.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		0.0, 0.2,	0.0, 1.0,	1.0, 1.0,

		1.0, 0.0,	1.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 0.0,	0.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	1.0, 0.0,	1.0, 1.0,
	};
	static const GLint g_texid_buffer_data[] = {
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	};
	mesh->add(0, GL_FLOAT, 3, (void *)g_vertex_buffer_data, 48);
	mesh->add(1, GL_FLOAT, 3, (void *)g_color_buffer_data, 48);
	mesh->add(2, GL_FLOAT, 2, (void *)g_tex_buffer_data, 48);
	mesh->add(3, GL_INT, 1, (void *)g_texid_buffer_data, 48);
	mesh->end();
	return (mesh);
}

static Mesh	*loadLeftRoad(void)
{
	Mesh *mesh = new Mesh(4);
	mesh->begin();
	static const GLfloat g_vertex_buffer_data[] = {
		-1.0f, 0.0f, -0.5f,	0.0f, 0.0f, -0.5f,	-1.0f, 0.0f, 0.5f,
		0.0f, 0.0f, 0.5f, 	-1.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,
		0.0f, 0.0f, -0.5f,	1.0f, 0.0f, -0.5f,	1.0f, 0.0f, 0.5f,
		1.0f, 0.0f, 0.5f, 	0.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,

		-1.0f, 0.0f, 0.5f,	-1.0f, 1.0f, 0.5f,	-1.0f, 0.0f, -0.5f,
		-1.0f, 0.0f, -0.5f,	-1.0f, 1.0f, 0.5f,	-1.0f, 1.0f, -0.5f,
		-1.0f, 1.0f, 0.5f,	-1.0f, 1.8f, 0.5f,	-1.0f, 1.0f, -0.5f,
		-1.0f, 1.0f, -0.5f,	-1.0f, 1.8f, 0.5f,	-1.0f, 1.8f, -0.5f,

		-1.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,	0.0f, 1.8f, -0.5f,
		0.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,
		0.0f, 1.8f, -0.5f,	1.0f, 1.8f, 0.5f,	1.0f, 1.8f, -0.5f,
		1.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	0.0f, 1.8f, 0.5f,

		-1.0f, 0.0f, 1.5f,	0.0f, 0.0f, 1.5f,	-1.0f, 1.0f, 1.5f,
		-1.0f, 1.0f, 1.5f,	0.0f, 0.0f, 1.5f,	0.0f, 1.0f, 1.5f,
		-1.0f, 1.0f, 1.5f,	0.0f, 1.0f, 1.5f,	-1.0f, 1.8f, 1.5f,
		-1.0f, 1.8f, 1.5f,	0.0f, 1.0f, 1.5f,	0.0f, 1.8f, 1.5f,

		0.0f, 0.0f, 1.5f,	1.0f, 0.0f, 1.5f,	0.0f, 1.0f, 1.5f,
		0.0f, 1.0f, 1.5f,	1.0f, 0.0f, 1.5f,	1.0f, 1.0f, 1.5f,
		0.0f, 1.0f, 1.5f,	1.0f, 1.0f, 1.5f,	0.0f, 1.8f, 1.5f,
		0.0f, 1.8f, 1.5f,	1.0f, 1.0f, 1.5f,	1.0f, 1.8f, 1.5f,

		-1.0f, 0.0f, 0.5f,	0.0f, 0.0f, 0.5f,	-1.0f, 0.0f, 1.5f,
		0.0f, 0.0f, 1.5f, 	-1.0f, 0.0f, 1.5f,	0.0f, 0.0f, 0.5f,
		0.0f, 0.0f, 0.5f,	1.0f, 0.0f, 0.5f,	1.0f, 0.0f, 1.5f,
		1.0f, 0.0f, 1.5f, 	0.0f, 0.0f, 1.5f,	0.0f, 0.0f, 0.5f,

		-1.0f, 1.8f, 0.5f,	-1.0f, 1.8f, 1.5f,	0.0f, 1.8f, 0.5f,
		0.0f, 1.8f, 1.5f, 	0.0f, 1.8f, 0.5f,	-1.0f, 1.8f, 1.5f,
		0.0f, 1.8f, 0.5f,	1.0f, 1.8f, 1.5f,	1.0f, 1.8f, 0.5f,
		1.0f, 1.8f, 1.5f, 	0.0f, 1.8f, 0.5f,	0.0f, 1.8f, 1.5f,

		-1.0f, 0.0f, 1.5f,	-1.0f, 1.0f, 1.5f,	-1.0f, 0.0f, 0.5f,
		-1.0f, 0.0f, 0.5f,	-1.0f, 1.0f, 1.5f,	-1.0f, 1.0f, 0.5f,
		-1.0f, 1.0f, 1.5f,	-1.0f, 1.8f, 1.5f,	-1.0f, 1.0f, 0.5f,
		-1.0f, 1.0f, 0.5f,	-1.0f, 1.8f, 1.5f,	-1.0f, 1.8f, 0.5f,
	};
	static const GLfloat g_color_buffer_data[] = {
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,

		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
	};
	static const GLfloat g_tex_buffer_data[] = {
		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	0.0, 0.0,
		1.0, 0.0,	0.0, 0.0,	0.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	1.0, 0.0,

		0.0, 0.0,	0.0, 1.0,	1.0, 0.0,
		1.0, 0.0,	0.0, 1.0,	1.0, 1.0,
		0.0, 0.2,	0.0, 1.0,	1.0, 0.2,
		1.0, 0.2,	0.0, 1.0,	1.0, 1.0,

		1.0, 0.0,	1.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 0.0,	0.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	1.0, 0.0,	1.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.0,	0.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.2,	0.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.0,	0.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.2,	0.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	0.0, 0.0,
		1.0, 0.0,	0.0, 0.0,	0.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	1.0, 0.0,

		1.0, 0.0,	1.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 0.0,	0.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	1.0, 0.0,	1.0, 1.0,

		0.0, 0.0,	0.0, 1.0,	1.0, 0.0,
		1.0, 0.0,	0.0, 1.0,	1.0, 1.0,
		0.0, 0.2,	0.0, 1.0,	1.0, 0.2,
		1.0, 0.2,	0.0, 1.0,	1.0, 1.0,
	};
	static const GLint g_texid_buffer_data[] = {
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		1, 1, 1,
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	};
	mesh->add(0, GL_FLOAT, 3, (void *)g_vertex_buffer_data, 96);
	mesh->add(1, GL_FLOAT, 3, (void *)g_color_buffer_data, 96);
	mesh->add(2, GL_FLOAT, 2, (void *)g_tex_buffer_data, 96);
	mesh->add(3, GL_INT, 1, (void *)g_texid_buffer_data, 96);
	mesh->end();
	return (mesh);
}

static Mesh	*loadRightRoad(void)
{
	Mesh *mesh = new Mesh(4);
	mesh->begin();
	static const GLfloat g_vertex_buffer_data[] = {
		-1.0f, 0.0f, -0.5f,	0.0f, 0.0f, -0.5f,	-1.0f, 0.0f, 0.5f,
		0.0f, 0.0f, 0.5f, 	-1.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,
		0.0f, 0.0f, -0.5f,	1.0f, 0.0f, -0.5f,	1.0f, 0.0f, 0.5f,
		1.0f, 0.0f, 0.5f, 	0.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,

		1.0f, 0.0f, 0.5f,	1.0f, 0.0f, -0.5f,	1.0f, 1.0f, 0.5f,
		1.0f, 0.0f, -0.5f,	1.0f, 1.0f, -0.5f,	1.0f, 1.0f, 0.5f,
		1.0f, 1.0f, 0.5f,	1.0f, 1.0f, -0.5f,	1.0f, 1.8f, 0.5f,
		1.0f, 1.0f, -0.5f,	1.0f, 1.8f, -0.5f,	1.0f, 1.8f, 0.5f,

		-1.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,	0.0f, 1.8f, -0.5f,
		0.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,
		0.0f, 1.8f, -0.5f,	1.0f, 1.8f, 0.5f,	1.0f, 1.8f, -0.5f,
		1.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	0.0f, 1.8f, 0.5f,

		-1.0f, 0.0f, 1.5f,	0.0f, 0.0f, 1.5f,	-1.0f, 1.0f, 1.5f,
		-1.0f, 1.0f, 1.5f,	0.0f, 0.0f, 1.5f,	0.0f, 1.0f, 1.5f,
		-1.0f, 1.0f, 1.5f,	0.0f, 1.0f, 1.5f,	-1.0f, 1.8f, 1.5f,
		-1.0f, 1.8f, 1.5f,	0.0f, 1.0f, 1.5f,	0.0f, 1.8f, 1.5f,

		0.0f, 0.0f, 1.5f,	1.0f, 0.0f, 1.5f,	0.0f, 1.0f, 1.5f,
		0.0f, 1.0f, 1.5f,	1.0f, 0.0f, 1.5f,	1.0f, 1.0f, 1.5f,
		0.0f, 1.0f, 1.5f,	1.0f, 1.0f, 1.5f,	0.0f, 1.8f, 1.5f,
		0.0f, 1.8f, 1.5f,	1.0f, 1.0f, 1.5f,	1.0f, 1.8f, 1.5f,

		-1.0f, 0.0f, 0.5f,	0.0f, 0.0f, 0.5f,	-1.0f, 0.0f, 1.5f,
		0.0f, 0.0f, 1.5f, 	-1.0f, 0.0f, 1.5f,	0.0f, 0.0f, 0.5f,
		0.0f, 0.0f, 0.5f,	1.0f, 0.0f, 0.5f,	1.0f, 0.0f, 1.5f,
		1.0f, 0.0f, 1.5f, 	0.0f, 0.0f, 1.5f,	0.0f, 0.0f, 0.5f,

		-1.0f, 1.8f, 0.5f,	-1.0f, 1.8f, 1.5f,	0.0f, 1.8f, 0.5f,
		0.0f, 1.8f, 1.5f, 	0.0f, 1.8f, 0.5f,	-1.0f, 1.8f, 1.5f,
		0.0f, 1.8f, 0.5f,	1.0f, 1.8f, 1.5f,	1.0f, 1.8f, 0.5f,
		1.0f, 1.8f, 1.5f, 	0.0f, 1.8f, 0.5f,	0.0f, 1.8f, 1.5f,

		1.0f, 0.0f, 1.5f,	1.0f, 0.0f, 0.5f,	1.0f, 1.0f, 1.5f,
		1.0f, 0.0f, 0.5f,	1.0f, 1.0f, 0.5f,	1.0f, 1.0f, 1.5f,
		1.0f, 1.0f, 1.5f,	1.0f, 1.0f, 0.5f,	1.0f, 1.8f, 1.5f,
		1.0f, 1.0f, 0.5f,	1.0f, 1.8f, 0.5f,	1.0f, 1.8f, 1.5f,
	};
	static const GLfloat g_color_buffer_data[] = {
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,

		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
		0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,	0.8f, 0.8f, 0.8f,
	};
	static const GLfloat g_tex_buffer_data[] = {
		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	0.0, 0.0,
		1.0, 0.0,	0.0, 0.0,	0.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	1.0, 0.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 0.0,	0.0, 1.0,	1.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		0.0, 0.2,	0.0, 1.0,	1.0, 1.0,

		1.0, 0.0,	1.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 0.0,	0.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	1.0, 0.0,	1.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.0,	0.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.2,	0.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.0,	0.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.2,	0.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	0.0, 0.0,
		1.0, 0.0,	0.0, 0.0,	0.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	1.0, 0.0,

		1.0, 0.0,	1.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 0.0,	0.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	1.0, 0.0,	1.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 0.0,	0.0, 1.0,	1.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		0.0, 0.2,	0.0, 1.0,	1.0, 1.0,
	};
	static const GLint g_texid_buffer_data[] = {
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		1, 1, 1,
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	};
	mesh->add(0, GL_FLOAT, 3, (void *)g_vertex_buffer_data, 96);
	mesh->add(1, GL_FLOAT, 3, (void *)g_color_buffer_data, 96);
	mesh->add(2, GL_FLOAT, 2, (void *)g_tex_buffer_data, 96);
	mesh->add(3, GL_INT, 1, (void *)g_texid_buffer_data, 96);
	mesh->end();
	return (mesh);
}

static Mesh	*loadMiddleRoad(void)
{
	Mesh *mesh = new Mesh(4);
	mesh->begin();
	static const GLfloat g_vertex_buffer_data[] = {
		-1.0f, 0.0f, -0.5f,	0.0f, 0.0f, -0.5f,	-1.0f, 0.0f, 0.5f,
		0.0f, 0.0f, 0.5f, 	-1.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,
		0.0f, 0.0f, -0.5f,	1.0f, 0.0f, -0.5f,	1.0f, 0.0f, 0.5f,
		1.0f, 0.0f, 0.5f, 	0.0f, 0.0f, 0.5f,	0.0f, 0.0f, -0.5f,

		-1.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,	0.0f, 1.8f, -0.5f,
		0.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	-1.0f, 1.8f, 0.5f,
		0.0f, 1.8f, -0.5f,	1.0f, 1.8f, 0.5f,	1.0f, 1.8f, -0.5f,
		1.0f, 1.8f, 0.5f, 	0.0f, 1.8f, -0.5f,	0.0f, 1.8f, 0.5f,

		-1.0f, 0.0f, 1.5f,	0.0f, 0.0f, 1.5f,	-1.0f, 1.0f, 1.5f,
		-1.0f, 1.0f, 1.5f,	0.0f, 0.0f, 1.5f,	0.0f, 1.0f, 1.5f,
		-1.0f, 1.0f, 1.5f,	0.0f, 1.0f, 1.5f,	-1.0f, 1.8f, 1.5f,
		-1.0f, 1.8f, 1.5f,	0.0f, 1.0f, 1.5f,	0.0f, 1.8f, 1.5f,

		0.0f, 0.0f, 1.5f,	1.0f, 0.0f, 1.5f,	0.0f, 1.0f, 1.5f,
		0.0f, 1.0f, 1.5f,	1.0f, 0.0f, 1.5f,	1.0f, 1.0f, 1.5f,
		0.0f, 1.0f, 1.5f,	1.0f, 1.0f, 1.5f,	0.0f, 1.8f, 1.5f,
		0.0f, 1.8f, 1.5f,	1.0f, 1.0f, 1.5f,	1.0f, 1.8f, 1.5f,

		-1.0f, 0.0f, 0.5f,	0.0f, 0.0f, 0.5f,	-1.0f, 0.0f, 1.5f,
		0.0f, 0.0f, 1.5f, 	-1.0f, 0.0f, 1.5f,	0.0f, 0.0f, 0.5f,
		0.0f, 0.0f, 0.5f,	1.0f, 0.0f, 0.5f,	1.0f, 0.0f, 1.5f,
		1.0f, 0.0f, 1.5f, 	0.0f, 0.0f, 1.5f,	0.0f, 0.0f, 0.5f,

		-1.0f, 1.8f, 0.5f,	-1.0f, 1.8f, 1.5f,	0.0f, 1.8f, 0.5f,
		0.0f, 1.8f, 1.5f, 	0.0f, 1.8f, 0.5f,	-1.0f, 1.8f, 1.5f,
		0.0f, 1.8f, 0.5f,	1.0f, 1.8f, 1.5f,	1.0f, 1.8f, 0.5f,
		1.0f, 1.8f, 1.5f, 	0.0f, 1.8f, 0.5f,	0.0f, 1.8f, 1.5f,
	};
	static const GLfloat g_color_buffer_data[] = {
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,

		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,	1.0f, 1.0f, 1.0f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,

		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
		0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,	0.9f, 0.9f, 0.9f,
	};
	static const GLfloat g_tex_buffer_data[] = {
		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	0.0, 0.0,
		1.0, 0.0,	0.0, 0.0,	0.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	1.0, 0.0,

		1.0, 0.0,	1.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 0.0,	0.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	1.0, 0.0,	1.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.0,	0.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.2,	0.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.0,	0.0, 1.0,
		1.0, 0.2,	0.0, 0.2,	1.0, 1.0,
		1.0, 1.0,	0.0, 0.2,	0.0, 1.0,

		1.0, 0.0,	0.0, 0.0,	1.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	0.0, 0.0,
		1.0, 0.0,	0.0, 0.0,	0.0, 1.0,
		0.0, 1.0,	1.0, 1.0,	1.0, 0.0,

		1.0, 0.0,	1.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	0.0, 0.0,	1.0, 1.0,
		1.0, 0.0,	0.0, 1.0,	0.0, 0.0,
		0.0, 1.0,	1.0, 0.0,	1.0, 1.0,
	};
	static const GLint g_texid_buffer_data[] = {
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,

		1, 1, 1,
		1, 1, 1,
		1, 1, 1,
		1, 1, 1,

		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	};
	mesh->add(0, GL_FLOAT, 3, (void *)g_vertex_buffer_data, 72);
	mesh->add(1, GL_FLOAT, 3, (void *)g_color_buffer_data, 72);
	mesh->add(2, GL_FLOAT, 2, (void *)g_tex_buffer_data, 72);
	mesh->add(3, GL_INT, 1, (void *)g_texid_buffer_data, 72);
	mesh->end();
	return (mesh);
}

void	Game::load(void)
{
	_road[0] = loadBasicRoad();
	_road[1] = loadLeftRoad();
	_road[2] = loadRightRoad();
	_road[3] = loadMiddleRoad();
}
